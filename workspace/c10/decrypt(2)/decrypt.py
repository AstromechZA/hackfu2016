#
# This file was generated by the Retargetable Decompiler
# Website: https://retdec.com
# Copyright (c) 2016 Retargetable Decompiler <info@retdec.com>
#

# --------------------- Global Variables ---------------------

g1 = 0 # $a0
g2 = 0 # $a1
g3 = 0 # $a2
g4 = False # $a3
g5 = 0 # $at
g6 = 0 # $fp
g7 = 0 # $gp
g8 = 0 # $ra
g9 = 0 # $s0
g10 = 0 # $t9
g11 = 0 # $v0
g12 = -1 # 0x411780
g13 = 0 # 0x411790
g14 = 0 # 0x41184c
g15 = 0 # 0x4118e0
g16 = 0 # 0x4118f0

# ------------------------ Functions -------------------------

# Address range: 0x400b38 - 0x400b77
def _init():
    global g10
    global g11
    global g7
    global g8
    v1 = g10 # 0x400b40
    g7 = v1 + 0x18cd8
    v2 = v1 + 0x10d0c # 0x400b50_0
    v3 = *v2 # 0x400b50
    g11 = v3
    if v3 != 0:
        v4 = *v2 # 0x400b60
        g10 = v4
        g8 = 0x400b70
        v4()
        # branch -> 0x400b70
    # 0x400b70
    function_400b78()
    result = g11 # 0x400b74_1
    return result

# Address range: 0x400b78 - 0x400b87
def function_400b78():
    global g5
    v1 = g1 # 0x400b78
    v2 = frame_dummy(v1) # 0x400b78
    g5 = v2
    v3 = g1 # 0x400b80
    function_400b88(v3)
    result = g5 # 0x400b84_1
    return result

# Address range: 0x400b88 - 0x400b9f
def function_400b88(a1):
    global g8
    # 0x400b88
    __do_global_ctors_aux(a1)
    g8 = v1
    return 0

# Address range: 0x400ba0 - 0x400c2f
def _PROCEDURE_LINKAGE_TABLE_():
    # 0x400ba0
    return

# Address range: 0x400c30 - 0x400ccf
def __ZNSt8ios_base4InitD1Ev__GLIBCXX_3_4():
    # 0x400c30
    return

# Address range: 0x400cd0 - 0x400d0f
def __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6___GLIBCXX_3_4():
    # 0x400cd0
    return

# Address range: 0x400d10 - 0x400d1b
def _ftext():
    # 0x400d10
    function_400d1c()
    result = g5 # 0x400d18_1
    return result

# Address range: 0x400d1c - 0x400d6f
def function_400d1c():
    # 0x400d1c
    __libc_start_main()
    # branch -> 0x400d68
    while True:
        pass

# Address range: 0x400d70 - 0x400e0b
def __do_global_dtors_aux():
    global g15
    v1 = g15 # 0x400d7c
    if v1 == 0:
        # 0x400d90
        g15 = 1
        # branch -> 0x400df0

# Address range: 0x400e0c - 0x400e3b
def frame_dummy(a1):
    global g1
    # 0x400e0c
    g1 = 0x410000
    v1 = g13 # 0x400e10
    if v1 != 0:
        pass
    result = g5 # 0x400e34
    return result

# Address range: 0x400e3c - 0x400e3f
def function_400e3c(a1):
    result = g5 # 0x400e3c_1
    return result

# Address range: 0x400e40 - 0x400fc3
# Demangled:     decrypt(std::string, std::string)
def _Z7decryptSsSs(result, a2, a3, a4, a5, a6, a7):
    v1 = v2 # bp-24
    _ZNSsixEj()
    v3 = g11 # 0x400e70
    v4 = *v3 # 0x400e70
    v5 = v4 # $v0
    _ZNSsixEj()
    v6 = v5 # 0x400e88
    v7 = *v6 # 0x400e88
    v5 = v7
    _ZNSsixEj()
    v8 = v5 # 0x400ea0
    v9 = *v8 # 0x400ea0
    v5 = v9
    _ZNSsixEj()
    v10 = v5 # 0x400eb8
    v11 = *v10 # 0x400eb8
    v5 = v11
    _ZNSsC1ERKSs()
    v1 = NULL
    v12 = 0 # $s0
    _ZNKSs4sizeEv()
    v13 = v12 # 0x400f6c1
    v14 = v5 # 0x400f6c2
    if v13 < v14:
        v15 = &v1 # 0x400f34_0
        v16 = NULL # 0x400edc_0
        # branch -> 0x400edc
        while True:
            # 0x400edc
            v5 = v16
            _ZNSsixEj()
            v17 = v5 # 0x400ef0
            v12 = v17
            v18 = v1 # 0x400ef4_0
            v5 = v18
            _ZNSsixEj()
            v19 = v5 # 0x400f08
            v20 = *v19 # 0x400f08
            v21 = v1 # 0x400f0c_0
            v22 = v21 # 0x400f0c
            v23 = v22 & -0x7ffffffd # 0x400f18
            v24 = v23 # 0x400f38
            if v23 <= 0xffffffff:
                v25 = (v22 + 3 | -4) + 1 # 0x400f30
                v24 = v25
                # branch -> 0x400f34
            v26 = *((v24 + v15 + 4)) # 0x400f3c
            v27 = v12 # 0x400f4c
            *v27 = v26 ^ v20
            v28 = v1 # 0x400f50_0
            v29 = v28 + 1 # 0x400f54
            v5 = v29
            v1 = v29
            v12 = v29
            _ZNKSs4sizeEv()
            v30 = v12 # 0x400f6c
            v31 = v5 # 0x400f6c
            if v30 < v31:
                v32 = v1
                v16 = v32
                # branch -> 0x400edc
                continue
    # 0x400fa4
    return result

# Address range: 0x400fc4 - 0x40128f
def main(argc, argv):
    global g11
    global g6
    global g9
    v1 = v2 # bp-352
    v3 = v4 # bp-328
    v5 = v6 # bp-324
    v7 = v8 # bp-320
    v9 = v10 # bp-304
    g6 = &v1
    if argc >= 2:
        v11 = argv[4] # 0x40101c
        g9 = v11
        _ZNSaIcEC1Ev()
        _ZNSsC1EPKcRKSaIcE()
        _ZNSaIcED1Ev()
        if argc < 3:
            # 0x401068
            _ZNKSs4sizeEv()
            # branch -> 0x4010b4
        # 0x4010b4
        _ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode()
        _ZNSsC1Ev()
        v12 = &v9 # 0x40110c_0
        _ZNSsC1Ev()
        v13 = &v5 # 0x401124_0
        v14 = &v3 # 0x401140_0
        v15 = &v7 # 0x401154_0
        # branch -> 0x4011e8
        while True:
            v16 = v12 # $v0
            _ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E()
            v17 = v9 # 0x401200
            v18 = *((v17 - 12)) # 0x401208
            v19 = v16 # 0x40120c
            v16 = v19 + v18
            _ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv()
            v20 = v16 # 0x40121c
            if v20 == 0:
                v21 = 0 # $s0
                _ZNSsD1Ev()
                _ZNSsD1Ev()
                _ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev()
                _ZNSsD1Ev()
                v22 = v21
                result = v22
                # branch -> 0x401270
                # 0x401270
                return result
            # 0x401124
            _ZNSsC1ERKSs()
            _ZNSsC1ERKSs()
            g11 = v14
            v23 = g4
            v24 = __libc_csu_init if v23 else 0 # 0x40116c
            _Z7decryptSsSs(v15, v13, v14, v24, 0, 0, 0)
            _ZNSsaSERKSs()
            _ZNSsD1Ev()
            _ZNSsD1Ev()
            _ZNSsD1Ev()
            _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E()
            _ZNSolsEPFRSoS_E()
            # branch -> 0x4011e8
    else:
        # 0x400fec
        _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc()
        result = 0
        # branch -> 0x401270
    # 0x401270
    return result

# Address range: 0x401290 - 0x40137f
def function_401290(a1, a2, a3):
    v1 = a1 # $s0
    _ZNSaIcED1Ev()
    v2 = v1 # 0x4012a4
    v3 = v2 # $a0
    _Unwind_Resume()
    v4 = v3 # 0x4012b4
    v1 = v4
    _ZNSsD1Ev()
    _ZNSsD1Ev()
    _ZNSsD1Ev()
    _ZNSsD1Ev()
    _ZNSsD1Ev()
    _ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev()
    _ZNSsD1Ev()
    v5 = v1 # 0x401370
    v6 = v5 # $v0
    _Unwind_Resume()
    result = v6 # 0x40137c_1
    return result

# Address range: 0x401380 - 0x401403
# Demangled:     __static_initialization_and_destruction_0(int, int)
def _Z41__static_initialization_and_destruction_0ii(a1, a2, a3, a4):
    global g1
    # 0x401380
    if a1 == 1:
        # 0x4013a4
        if a2 == 0xffff:
            # 0x4013b4
            g1 = 0x4118f0
            _ZNSt8ios_base4InitC1Ev()
            __cxa_atexit(__ZNSt8ios_base4InitD1Ev__GLIBCXX_3_4, &g16, &g14)
            # branch -> 0x4013ec
    result = g5 # 0x4013fc
    return result

# Address range: 0x401404 - 0x40143b
def _GLOBAL__sub_I__Z7decryptSsSs():
    global g6
    v1 = v2 # bp-32
    g6 = &v1
    v3 = g3 # 0x40141c
    v4 = g4
    v5 = __libc_csu_init if v4 else 0 # 0x40141c
    result = _Z41__static_initialization_and_destruction_0ii(1, 0xffff, v3, v5) # 0x40141c
    return result

# Address range: 0x40143c - 0x40143f
def function_40143c(a1):
    result = g5 # 0x40143c_1
    return result

# Address range: 0x401440 - 0x401447
def __libc_csu_fini(a1):
    result = g5 # 0x401440
    return result

# Address range: 0x401448 - 0x4014f7
def __libc_csu_init(a1, a2, a3, a4, a5):
    global g1
    global g10
    global g2
    global g3
    global g7
    global g8
    global g9
    v1 = 0 # $s5
    v2 = 0 # $s4
    v3 = 0 # $s3
    v4 = 0 # $s2
    v5 = 0 # $s1
    v6 = g10 # 0x401450
    g10 = _init
    v3 = a1
    v2 = a2
    v1 = a3
    v7 = _init() # 0x401484
    g7 = v6 + 0x183c8
    v8 = v6[0x103f0] # 0x401494
    v5 = v8
    v9 = v6[0x103f4] # 0x401498
    v10 = v9 - v8 # 0x4014a0
    v4 = v10 / 4
    if v10 < 4:
        result = v7
        # 0x4014d4
        return result
    v11 = 0 # 0x4014b4
    v12 = v8 # 0x4014b0
    while True:
        v13 = *v12 # 0x4014b0
        g10 = v13
        g9 = v11 + 1
        v14 = v3 # 0x4014b8
        g1 = v14
        v15 = v2 # 0x4014bc
        g2 = v15
        g8 = 0x4014c8
        v16 = v1 # 0x4014c0
        g3 = v16
        v13()
        v17 = g9 # 0x4014c8
        v18 = v4 # 0x4014c8
        v19 = v5 # 0x4014cc
        v20 = v19 + 4 # 0x4014cc
        v5 = v20
        if v17 >= v18:
            result = 0
            # break -> 0x4014d4
            break
        v11 = v17
        v12 = v20
        # continue -> 0x4014b0
    # 0x4014d4
    return result

# Address range: 0x4014f8 - 0x4014ff
def function_4014f8(a1):
    result = g5 # 0x4014fc_1
    return result

# Address range: 0x401500 - 0x401553
def __do_global_ctors_aux(a1):
    global g11
    v1 = g12 # 0x401504
    g11 = -1
    if v1 == -1:
        # 0x401540
        return 0
    v2 = -1 # $s1
    v3 = 0x411780 # 0x40152c
    v4 = v3 - 4 # $s0
    unknown_ffffffff()
    v5 = v4 # 0x401534
    v6 = *v5 # 0x401534
    # branch -> 0x40152c
    while v6 != v2:
        v7 = v2 # 0x401538
        v3 = v5
        v4 = v3 - 4
        unknown_ffffffff()
        v5 = v4
        v6 = *v5
        # continue -> 0x40152c
    # 0x401540
    return 0

# Address range: 0x401554 - 0x40155f
def function_401554(a1):
    result = g5 # 0x40155c_1
    return result

# Address range: 0x401560 - 0x40157f
def ___libc_start_main(a1):
    global g10
    global g8
    v1 = g7 # 0x401560
    v2 = *((v1 - 0x7ff0)) # 0x401560
    g10 = v2
    v3 = g8 # 0x401564
    v4 = v3 # $t7
    g8 = 0x401570
    v2()
    result = v4 # 0x40157c_1
    return result

# Address range: 0x401580 - 0x40159f
def _fini(a1):
    v1 = g2 # 0x401598
    function_4015a0(a1, v1)
    result = g5 # 0x40159c_1
    return result

# Address range: 0x4015a0 - 0x4015b7
def function_4015a0(a1, a2):
    # 0x4015a0
    __do_global_dtors_aux()
    result = g5 # 0x4015ac
    return result

# --------------- Dynamically Linked Functions ---------------

# int __cxa_atexit(void(*func)(void *), void * arg, void * dso_handle);

# __libc_start_main()
# _Unwind_Resume()
# _ZNKSs4sizeEv()
# _ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv()
# _ZNSaIcEC1Ev()
# _ZNSaIcED1Ev()
# _ZNSolsEPFRSoS_E()
# _ZNSsaSERKSs()
# _ZNSsC1EPKcRKSaIcE()
# _ZNSsC1ERKSs()
# _ZNSsC1Ev()
# _ZNSsD1Ev()
# _ZNSsixEj()
# _ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode()
# _ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev()
# _ZNSt8ios_base4InitC1Ev()
# _ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E()
# _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E()
# _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc()

# --------------------- Meta-Information ---------------------

# Detected compiler/packer: gcc (4.6.3)
# Detected language: C++
# Detected functions: 25
# Decompiler release: v2.1.2 (2016-01-27)
# Decompilation date: 2016-04-24 15:45:23

# ----------------------- Entry Point ------------------------

if __name__ == '__main__':
    import sys
    sys.exit(main(len(sys.argv), sys.argv))
